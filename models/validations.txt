Sequelize provides a variety of validation options for model attributes. Here’s a comprehensive list of validation options you can use, along with examples of how to apply them to your models:

### Validation Options

1. **`notNull`**: Ensures that a field cannot be null.
   ```javascript
   name: {
     type: DataTypes.STRING,
     allowNull: false,
     validate: {
       notNull: { msg: 'Name cannot be null' }
     }
   }
   ```

2. **`notEmpty`**: Ensures that a field is not an empty string.
   ```javascript
   name: {
     type: DataTypes.STRING,
     validate: {
       notEmpty: { msg: 'Name cannot be empty' }
     }
   }
   ```

3. **`len`**: Ensures that a string field length is within a specified range.
   ```javascript
   name: {
     type: DataTypes.STRING,
     validate: {
       len: { args: [3, 50], msg: 'Name must be between 3 and 50 characters' }
     }
   }
   ```

4. **`isAlpha`**: Ensures that a string contains only letters.
   ```javascript
   name: {
     type: DataTypes.STRING,
     validate: {
       isAlpha: { msg: 'Name can only contain letters' }
     }
   }
   ```

5. **`isAlphanumeric`**: Ensures that a string contains only letters and numbers.
   ```javascript
   username: {
     type: DataTypes.STRING,
     validate: {
       isAlphanumeric: { msg: 'Username can only contain letters and numbers' }
     }
   }
   ```

6. **`isEmail`**: Ensures that a string is a valid email address.
   ```javascript
   email: {
     type: DataTypes.STRING,
     validate: {
       isEmail: { msg: 'Email must be a valid email address' }
     }
   }
   ```

7. **`isURL`**: Ensures that a string is a valid URL.
   ```javascript
   website: {
     type: DataTypes.STRING,
     validate: {
       isURL: { msg: 'Website must be a valid URL' }
     }
   }
   ```

8. **`isDate`**: Ensures that a value is a valid date.
   ```javascript
   birthdate: {
     type: DataTypes.DATE,
     validate: {
       isDate: { msg: 'Birthdate must be a valid date' }
     }
   }
   ```

9. **`isInt`**: Ensures that a value is an integer.
   ```javascript
   age: {
     type: DataTypes.INTEGER,
     validate: {
       isInt: { msg: 'Age must be an integer' }
     }
   }
   ```

10. **`isFloat`**: Ensures that a value is a float.
    ```javascript
    salary: {
      type: DataTypes.FLOAT,
      validate: {
        isFloat: { msg: 'Salary must be a float value' }
      }
    }
    ```

11. **`min` and `max`**: Ensures that a numeric value falls within a specified range.
    ```javascript
    age: {
      type: DataTypes.INTEGER,
      validate: {
        min: { args: 1, msg: 'Age must be greater than or equal to 1' },
        max: { args: 120, msg: 'Age must be less than or equal to 120' }
      }
    }
    ```

12. **`isIn`**: Ensures that a value is within a specified list of values.
    ```javascript
    status: {
      type: DataTypes.STRING,
      validate: {
        isIn: {
          args: [['active', 'inactive', 'pending']],
          msg: 'Status must be one of: active, inactive, pending'
        }
      }
    }
    ```

13. **`isUUID`**: Ensures that a value is a valid UUID.
    ```javascript
    uuid: {
      type: DataTypes.UUID,
      defaultValue: DataTypes.UUIDV4,
      validate: {
        isUUID: { msg: 'UUID must be a valid UUID' }
      }
    }
    ```

### Example Model with Various Validations

Here’s an example model incorporating several of these validations:

```javascript
module.exports = (sequelize, DataTypes) => {
  const User = sequelize.define('User', {
    id: {
      type: DataTypes.INTEGER,
      autoIncrement: true,
      primaryKey: true
    },
    name: {
      type: DataTypes.STRING,
      allowNull: false,
      validate: {
        notEmpty: { msg: 'Name cannot be empty' },
        len: { args: [3, 50], msg: 'Name must be between 3 and 50 characters' }
      }
    },
    email: {
      type: DataTypes.STRING,
      allowNull: false,
      validate: {
        notEmpty: { msg: 'Email cannot be empty' },
        isEmail: { msg: 'Email must be a valid email address' }
      }
    },
    age: {
      type: DataTypes.INTEGER,
      validate: {
        isInt: { msg: 'Age must be an integer' },
        min: { args: 1, msg: 'Age must be greater than or equal to 1' },
        max: { args: 120, msg: 'Age must be less than or equal to 120' }
      }
    },
    website: {
      type: DataTypes.STRING,
      validate: {
        isURL: { msg: 'Website must be a valid URL' }
      }
    }
  });

  return User;
};
```

### Summary

- **Validation Options**: Sequelize offers a wide range of validation options including `notNull`, `notEmpty`, `len`, `isEmail`, `isIn`, and more.
- **Custom Messages**: You can specify custom error messages for each validation rule.
- **Testing**: Make sure to test your validations by providing various inputs and checking that the error messages are properly returned.

These validations will help ensure that the data being saved to your database meets the required constraints and formats.